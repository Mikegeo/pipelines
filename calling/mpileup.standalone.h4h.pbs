#!/bin/bash
#PBS -l nodes=1:ppn=16,walltime=100:00:00,vmem=60g,mem=220g
#PBS -N variantCalls
#PBS -q himem
#PBS -V
#PBS -j oe
#PBS -m abe
#PBS -M slei.bass@gmail.com

:'
	This batch script accomplishes 6 Layers of protocols:
	- Task 1: Index merged bam files
	  + Exome QC (hg19)
	- Task 2: Call copy number variants single samples at a time
	  + Copy number calling (CNVs)
	- Task 3: Call, categorize, filter clean point mutations
	  + Variant calling (SNVs, indels) and quality recalibration (Bcftools, Varscan2, GATK)
	- Task 4: Annotate mutations
	  + Variant annotation (ClinVar, dbSNP, Exac, Cosmic)
	- Task 5: Data mining (VCF formatting, thresholding, feature wrangling)
	  + Data reformatting for pattern recognition procedures
	  + Variant multi-selection based on scaled-down filters
	  + Variant thresholding (mutli-metrics, function)
	  + Data mining and multi-metric summary reporting
	- Task 6: Clonal evolution from same individual dual exome samples
	  + Clonal evolution (pyclone)
'

set -eux

module load java/8 samtools/1.9 bedtools/2.27.1
module load HTSeq/0.7.2 bwa/0.7.15 bedops/2.4.14 picard/2.10.9 
module load bamtools/2.4.2 tabix/0.2.6 varscan/2.4.2 
module load snpEff/4.3
module load R/3.5.0 python/2.7 
module load gatk/3.8
module load qualimap/2.2
#module load python3/3.6.5 CNVkit/0.9.3

## use the below exec when loading R
## java -jar $gatk_dir/gatk-package-4.0.5.1-local.jar HaplotypeCaller


## H4H directories
## Misc tools parameters
scratch=/cluster/projects/kridelgroup
_storage=$scratch/relapse/mutations
home=/cluster/home/sbassim
user_databases=$scratch/databases
admin_databases=/cluster/tools/data/genomes/human/hg19/variantcallingdata
pbs=$(echo $PBS_JOBID | cut -f1 -d '.')
time=$home/time
jobid=$pbs.exome_calling.multitool.annotated_pyclone
start=$(date); echo "Job started at: $start" > $time/$jobid.time

# __CHANGE__
_realign2indels=FALSE
_call2variants=TRUE
cnvs=cnmops
pipeline=bcftools
_protocol=removeFunctionV3
normal_cnv=2
minor_cnv=0
_priors=major_copy_number
_read_depth=10
_read_depth_bcftools=5
_read_depth_gatk=20
_read_phred=30
_allel_pval=10e-10
_allel_freq=5
_call_quality=5
_pyclone_method=pyclone_binomial

# __DONT CHANGE__
compression=0
threads=32
mapq=39
_gVMEM=20g
snpeff_genome=GRCh37.75
_data=$_storage/raw
workdir=$_storage/pyclone_analysis/$pbs
snpeff_config=$home/snpEff/snpEff.config

_pyclone_config=$_storage/pyclone_configs
## idx created from ClinVar annotating current samples
_variant_function=$_storage/variant_function.idx
_EXAC=$user_databases/gnomad.rs_position.idx
_COSMIC=$user_databases/cosmic/CosmicCodingMuts.vcf.gz
_COSMIC_mut=$user_databases/cosmic/CosmicMutantExportCensus.tsv.gz

## make sure chromosomes in gold_indels match bam (eg, chr1 or 1)
gold_indels=$user_databases/Mills.gold.standard.adapted_noChr.vcf

mkdir -p $workdir

agilent=$_storage/targets/padded.clean.bed
agilent_corrected=$_storage/targets/padded.clean_qualimap.bed
#agilent_corrected=$_storage/targets/regions.clean_qualimap.bed
ucsc=$_storage/targets/exons.ucsc.clean.bed
genome_reference=$user_databases/GRCh37-lite.fa



sample[1]=$_data/A61960.*.realigned.bam
sample[2]=$_data/A61961.*.realigned.bam


cd $workdir
pipeline=bcftools
output[1]=output.1_bash.$pipeline.samtools.mpileup.agilent


module load samtools/1.9
bcftools mpileup -Ou ${sample[1]} ${sample[2]} \
	 --annotate AD,ADF,ADR \
	 --targets-file $agilent \
	 --ignore-RG -f $genome_reference - \
    | bcftools call -vmO z --skip-variants indels -o ${output[1]}.vcf.gz

sleep 30

## samtools mpileup stats
tabix -p vcf ${output[1]}.vcf.gz
bcftools stats -F $genome_reference -s - ${output[1]}.vcf.gz > ${output[1]}.stats.txt
gzip ${output[1]}.vcf.gz



pipeline=varscan2
output[1]=output.1_bash.$pipeline.samtools.mpileup.agilent


module load samtools/1.3.1
samtools mpileup -B --ignore-RG -l $agilent -f $genome_reference ${sample[1]} ${sample[2]} \
    | java -jar $varscan_dir/VarScan.jar mpileup2snp - \
	   --min-var-freq 0.01 \
	   --p-value 0.01 \
	   --output-vcf 1 \
	   > ${output[1]}.vcf


gzip ${output[1]}.vcf.gz


## add 2 new dummy columns that will override an error in
## qualimap coding 
awk 'BEGIN{OFS="\t"}{print $1,$2,$3,$4,0,"."}' $agilent > $agilent_corrected
output[2]=output.2.quality.agilent
qualimap bamqc -bam ${sample[1]} -c \
	--java-mem-size=$_gVMEM \
	-gd HUMAN - hg19 \
	-sd -sdmode 0 \
	-gff $agilent_corrected \
	-hm 3 \
	-nr 1000 \
	-nt $threads \
	-nw 400 \
	-oc $workdir/${output[2]}.genome_coverage.txt \
	-os $workdir/${output[2]}.stats.txt \
	-outdir $workdir \
	-outfile $workdir/${output[2]}.report.pdf \
	-outformat HTML \
	-p non-strand-specific


## any tool any sample size
output[3]=output.3_bash.$pipeline.snpeff_annot.$snpeff_genome.clinvar.dbsnp
java -jar $snpeff_dir/SnpSift.jar annotate \
     -noLog -noDownload \
     -c $snpeff_config \
     -clinvar \
     ${output[1]}.vcf \
    | java -jar $snpeff_dir/SnpSift.jar annotate \
	   -noLog -noDownload \
	   -c $snpeff_config \
	   -dbsnp - \
    | java -jar $snpeff_dir/snpEff.jar eff \
	   -noDownload -noLog \
	   -c $snpeff_config \
	   -stats ${output[3]}.html \
	   $snpeff_genome \
	   > ${output[3]}.vcf


## only varscan2 with sample comparison
output[4]=output.4_mined.$pipeline.snpeff_annot.$snpeff_genome.clinvar.dbsnp.exac
grep -v "^#" ${output[3]}.vcf \
    | grep -v "rs" \
    | grep -iv "^[a-z]" \
    | awk 'match($3, /\./) {print $0}' \
    | grep -vFwf <(cat $_EXAC) \
    | sed -e 's/;WT=.*ANN=.|/\t/g' -e 's/|ENS.*:ADR//g' \
    | cut -f1-2,4-5,8-11 \
    | sed -e 's/ADP=//g' -e 's/|/\t/g' -e 's/:/\t/g' -e 's/%//g' \
    | cut -f1-8,12-16,26-30 \
    | awk 'NF > 17' \
    | awk -vdp=$_read_depth_bcftools '{if($9 >= dp && $12 >= dp) print $0}' \
    | egrep -iv "^\.|muc|usp|rp11" \
    | grep -v ">" \
	  > ${output[4]}.txt

sed -i "1i$(echo -e "chromosome\tposition\treference\tvariant\tquality\tsite\teffect\tgene\ts1_dp\ts1_rd\ts1_ad\ts1_freq\ts1_pval\ts2_dp\ts2_rd\ts2_ad\ts2_freq\ts2_pval")" ${output[4]}.txt




## only bcftools with sample comparison
output[4]=output.4_mined.$pipeline.snpeff_annot.$snpeff_genome.clinvar.dbsnp.exac
grep -v "^#" ${output[3]}.vcf \
    | grep -v "rs" \
    | grep -iv "^[a-z]" \
    | awk 'match($3, /\./) {print $0}' \
    | grep -vFwf <(cat $_EXAC) \
    | sed -e 's/;/\t/g' -e 's/\tDP=/\t/g' -e 's/SGB=.*MQ=/MQ=/g' -e 's/VDB=.*MQ=/MQ=/g' \
    | sed -e 's/MQ=//g' -e 's/ANN=.|//g' -e 's/|ENS.*AD//g' -e 's/|/\t/g' \
    | cut -f1,5,9 -d':' \
    | sed -e 's/\t.\/./\t/g' -e 's/,/\t/g' -e 's/://g' \
    | awk -vdp=$_read_depth_bcftools '{if($8 >= dp) print $0}' \
    | egrep -iv "^\.|muc|usp|rp11" \
    | grep -v ">" \
    | awk 'NF > 15' \
	  > ${output[4]}.txt

sed -i "1i$(echo -e "chromosome\tposition\tannotated\treference\tvariant\tquality\tstrand\tdp\tmq\tsite\teffect\tgene\ts1_rd\ts1_ad\ts2_rd\ts2_ad")" ${output[4]}.txt





end=$(date); echo "Job ended at: $end" >> $time/$jobid.time

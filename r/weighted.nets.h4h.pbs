#!/bin/bash
#PBS -l nodes=1:ppn=16,walltime=24:00:00,vmem=30g,mem=220g
#PBS -N networks
#PBS -q all
#PBS -V
#PBS -j oe
#PBS -m abe
#PBS -M slei.bass@gmail.com

set -x

module load R

# cluster directories
# server characteristics and files indexing
scratch=/cluster/projects/kridelgroup
home=/cluster/home/sbassim

pbs=$(echo $PBS_JOBID | cut -f1 -d '.')
project=$scratch/relapse
output=$project/networks/$pbs




## MUST DEFINE BEFORE EXECUTION
_bstatistics=1.5
_contrast=systemicRelapse
_workingDir=$project/expression/90800
_affymetrix=$_workingDir/summary/normalized.systemic.trx.expression.txt



## DO NOT TOUCH
mkdir -p $output $output/$_contrast

time=$home/time
jobid=$pbs.R.networks
start=$(date); echo "Job started at: $start" > $time/$jobid.time


############
## PART I ##
############
cd $output
listFiles=$(find $_workingDir -maxdepth 3 -iname "*${_contrast}.moderated*txt")
for files in $listFiles; do

    touch $output/ids.tmp
    # get transcript IDs for differentially expressed genes based on B-statistics confidence score
    # remove NAs
    cat $files | sed -e '1d' -e 's/ /./g' | awk -vb=$_bstatistics '{if($25>=b) print $0}' | cut -f1 | sort - | uniq -u >> $output/ids.tmp

done

# create correct headers
paste <(printf "%s\n" "ids") \
      <(printf "%s\n" "$(sed '2, $d' $_affymetrix)") \
      > $output/expressions
# get expression of only annotated genes (NAs are discarded)
cat $_affymetrix | grep -Fwf <(cat $output/ids.tmp | sort - | uniq -) >> $output/expressions




#############
## PART II ##
#############
# convert matrix of gene interactions into graphml output
cp $home/script*/r/convertMatrix2graph.R $output

# infer gene-gene interactions
R CMD BATCH $home/script*/r/weighted.nets.affymetrix.R



##############
## PART III ##
##############
cd $output

## sort the output files (networks and heatmaps) into subfolders
## subfolders are later compressed
function sorting_dir () {
    local _index=$1
    _sorted=networks/$_index

    mkdir -p $_sorted
    mv *${_index}* $_sorted
    tar cf $_index.tar $_sorted
    gzip $_index.tar

}

for i in heatmap module standardize range log; do
    sorting_dir $i
    mv *gz $_contrast
    rm -rf networks
done



end=$(date); echo "Job ended at: $end" >> $time/$jobid.time


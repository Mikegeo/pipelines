#!/bin/bash
#PBS -l nodes=1:ppn=2,walltime=56:00:00,vmem=30g,mem=220g
#PBS -N networks
#PBS -q all
#PBS -V
#PBS -j oe
#PBS -m abe
#PBS -M slei.bass@gmail.com

set -x

module load R

##################
## DO NOT TOUCH ##
##################
# cluster directories
# server characteristics and files indexing
scratch=/cluster/projects/kridelgroup
home=/cluster/home/sbassim
pbs=$(echo $PBS_JOBID | cut -f1 -d '.')
project=$scratch/relapse
output=$project/networks/$pbs
time=$home/time
jobid=$pbs.R.networks
start=$(date); echo "Job started at: $start" > $time/$jobid.time



#################
## USER DEFINE ##
#################
## MUST DEFINE BEFORE EXECUTION
## repositories of gene expression analysis already executed
## Standard libraries (relapse project)
## 149518 only ncRNA mentioned were removed 75k > 29k > 20k > 500
_contrast=systemicRelapse
_workingDir=$project/expression/317272
_affymetrix=$_workingDir/summary/normalized.subset.*txt

## execute pipeline: clusters, networks, all
run_pipe=networks


## total, up or clusters
## either run network analysis on all significant dataset (total)
## analysis on upregulated genes (up)
## analysis on genes selected by hiereachical clustering (clusters)
_strategy=total

## if strategy is clusters
## setting these parameters will set the correlation method,
## normalization, thresholds and more.
power=8
modulelength=26
standardize=hellinger
clustering=complete
correlation=spearman
_networkDir=$project/networks/104859
_bstatistics=1.5

############
## PART I ##
############
## Data mining the expression datasets based on statistical thresholds
## the steps are done after limma expression linear fitting
## B-statistics is the major factor in choosing genes
## equation to get the chance (%) of a gene to be differentially expressed
## ( exp(1) / ( exp(1) + 1 )) * 100
##
## o---Bstats = -2 (12%)
## o---Bstats = -1 (26%)
## o---Bstats = -0.5 (37%)
## |
## o---Bstats = 0 (50%)
## |
## o---Bstats = 0.5 (62%)
## o---Bstats = 1 (73%)
## o---Bstats = 1.5 (81%)
## o---Bstats = 2 (88%)


mkdir -p $output
cd $output

## already set thresholds based on the $_workingDir output
_adjPval=0.05
_avgexpression=5
_foldchange=1


if [ $_strategy == "total" ]; then

    mkdir -p $output/$_contrast

    _bstatistics=-1.5
    
    touch $output/ids.total.tmp
    
    listFiles=$(find $_workingDir -maxdepth 3 -iname "*${_contrast}.moderated*txt")

    for files in $listFiles; do

	# get transcript IDs for differentially expressed genes based on B-statistics confidence score
	# remove NAs
	cat $files | sed -e '1d' -e 's/ /./g' | awk -vb=$_bstatistics '{if($25>=b) print $0}' | cut -f1 | sort - | uniq -u >> $output/ids.total.tmp

    done

    _counts=$(cat $output/ids.$_strategy.tmp | wc -l)




elif [ $_strategy == "clusters" ]; then

    ## ids of the probes
    _preset="tc0"
    
    grep -i $_preset $_networkDir/network.POW${power}.Th0.5.GEN${modulelength}.STD${standardize}.SSIZE*.CLU${clustering}.var-CORR${correlation}.graphml | \
	sed -e 's/.*<data.*name.>//g' -e 's/<.data.*$//g' | \
	sort - | uniq >> $output/ids.clusters.tmp

    _counts=$(cat $output/ids.$_strategy.tmp | wc -l)






elif [ $_strategy == "up" ]; then

    _bstatistics=0

    touch $output/ids.up.tmp

    ## Get upregulated genes COUNTS
    _counts=$(cat $_workingDir/summary/summary.full*.txt | awk -vb=$_bstatistics '/avgex/ && /up/ {if($9>=1 && $5>=b)print $9}'| awk '{sum+=$1} END {print sum}')



    if [[ $_counts > 150 ]]; then

	_bstatistics=0

	## Get the MODEL/design based on both average expression and b-statisitics thresholds
	_contrast=$(cat $_workingDir/summary/summary.full*.txt | awk -vb=$_bstatistics '/avgex/ && /up/ {if($9>=1 && $5>=b)print $1}'| sort - | uniq -)

	for _index in $_contrast; do

	    listFiles=$(find $_workingDir -maxdepth 3 -iname "${_index}*moderated*txt")

	    for files in $listFiles; do
		
		## Get gene IDs based on adjusted Pvalue and B-statistics values
		## the uniq -u will remove redundant NAs
		cat $files | sed -e '1d' -e 's/ /./g' | \
		    awk -vb=$_bstatistics '{if($25>=b) print $0}' | \
		    awk -vp=$_adjPval '{if($24<=p) print $0}' | \
		    awk -vh=$_foldchange '{if($20>=h) print $1}' | \
		    sort - | uniq -u >> $output/ids.up.tmp
		
	    done

	done




    elif [[ $_counts < 150 ]]; then

	_bstatistics="12-80p"
	
	## Get the MODEL/design based on average expression threshold alone
	_contrast=$(cat $_workingDir/summary/summary.full*.txt | awk '/avgex/ && /up/ {if($9>=1)print $1}'| sort - | uniq -)

	for _index in $_contrast; do

	    listFiles=$(find $_workingDir -maxdepth 3 -iname "${_index}*moderated*txt")

	    for files in $listFiles; do
		
		## Get gene IDs based on adjusted Pvalue and B-statistics values
		## the uniq -u will remove redundant NAs
		cat $files | sed -e '1d' -e 's/ /./g' | \
		    awk -vb=$_bstatistics '{if($25>=b) print $0}' | \
		    awk -vp=$_adjPval '{if($24<=p) print $0}' | \
		    awk -vh=$_foldchange '{if($20>=h) print $1}' | \
		    sort - | uniq -u >> $output/ids.up.tmp

	    done

	done

    fi

fi



# create correct headers
paste <(printf "%sids") \
      <(printf "%s$(sed -e '2, $d' $_affymetrix)") | sed 's/\t\t/\t/g' \
      > $output/expressions
# get expression of only annotated genes (NAs are discarded)
cat $_affymetrix | grep -Fwf <(cat $output/ids.$_strategy.tmp | sort - | uniq -) >> $output/expressions

## for verification, output the dimensions (rows x columns) of the expression file
## number of rows, or genes, must be equal to the number of genes being selected based on their B-stats and average expession
_selected=$(cat $output/expressions | sed '1d' | wc -l && awk '{ if(NF>max) max=NF } END {print max}' $output/expressions | sed '1d')
echo -e "\n\nNumber of selected genes x Number of sample cases: "
echo "$_selected"
echo -e "\nNumber of significant genes based on their Bstats >= 0 and average expression >= 10: "
echo "$_counts"
touch $output/${_counts}genes.min${_bstatistics}bstats.min${_avgexpression}avgexp.$(cat $output/expressions | sed '1d' | wc -l)selected




#############
## PART II ##
#############
## sort the output files (networks and heatmaps) into subfolders
## subfolders are later compressed
function sorting_dir ()
{
    local _index=$1
    local _sorted=$2/$_index

    mkdir -p $_sorted
    mv *${_index}* $_sorted
    mv *${_index}*graphml $_sorted    
    tar cf $_index.tar $_sorted
    gzip $_index.tar

}

function execute_sort ()
{
    local j=$1

    mkdir -p $output/summary
    mv *iteration* *Rout *tmp $output/summary

    if [ $j == "clusters" ]; then

	for i in bootstrap standardize range hellinger log; do
	    sorting_dir $i $j
	    rm -rf $j
	done

    elif [ $j == "networks" ]; then
	
	for i in POW heatmap module standardize range; do
	    sorting_dir $i $j
	    rm -rf $j
	done

    fi
}


function execute_pipeline ()
{
    ## execute either clustering of gene expression
    ## or network inference, or both
    local p=$1

    if [ $p == "clusters" ]; then
	# Cluster data (hierarchical clustering)
	R CMD BATCH $home/script*/r/heatmaps.3.0.R
	# sort files
	execute_sort clusters
	# finish writing R outputs
	sleep 600


    elif [ $p == "networks" ]; then
	# infer gene-gene interactions (networks)
	R CMD BATCH $home/script*/r/weighted.nets.affymetrix.R
	# sort files
	execute_sort networks
	# finish writing R outputs
	sleep 600


    elif [ $p == "all" ]; then
	# Cluster data (hierarchical clustering)
	R CMD BATCH $home/script*/r/heatmaps.3.0.R
	# sort files
	execute_sort clusters
	# finish writing R outputs
	sleep 600

	# infer gene-gene interactions (networks)
	R CMD BATCH $home/script*/r/weighted.nets.affymetrix.R
	# sort files
	execute_sort networks
	# finish writing R outputs
	sleep 600

    fi

}


##############
## PART III ##
##############
## Execute the analysis of network inference
# convert matrix of gene interactions into graphml output
cd $output
cp $home/script*/r/convertMatrix2graph.R $output

execute_pipeline $run_pipe

mv $output/*summary*txt summary

end=$(date); echo "Job ended at: $end" >> $time/$jobid.time

